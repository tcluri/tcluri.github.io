#+hugo_base_dir: ../
#+hugo_paired_shortcodes: %sidenote

* DONE Hello world :blog:
  CLOSED: [2022-03-26 Sat 13:53]
:PROPERTIES:
:EXPORT_FILE_NAME: hello-world
:END:
Hello World! This is my website built using hugo with ox-hugo, emacs and org-mode.
* DONE File permissions in Linux :linux:
  CLOSED: [2022-07-13 Wed 12:45]
:PROPERTIES:
:EXPORT_FILE_NAME: linux-file-permissions
:END:
What are file permissions?
#+hugo: more
In Linux, file permissions, attributes, and ownership control the access level that
the system processes and users have to files. This ensures that only authorized users
and processes can access specific files and directories.

To find out what permissions exist for files & folders in the current directory,
do ~ls -la~ after the user prompt in the terminal. It is represented by the first
ten characters that shows for each file/folder present in the directory.


Example file permissions in current directory
#+begin_src
 user$ ls -la
 -rw-r--r-- 1 user user 2203 Jul 23 23:26 foo.py
#+end_src

** Permisssion types
There are three permission types:
1. read(r)
2. write(w)
3. execute(x)

** User-based permission groups
The first ten characters at the beginning of the output in the terminal
can be broken down into the following

A) file type - represented by the zeroth character.
B) owner - represented in the first 3 characters.
   The Owner permissions apply only to the owner of the file or
   directory, and will not impact the actions of other users.
C) group - represented in the middle 3 characters.
   The Group permissions apply only to the group that has been
   assigned to the file or directory, and will not affect the
   actions of other users.
D) all users - represented in the last 3 characters.
   The All Users permissions apply to all other users on the system,
   and this is the permission group that you want to watch the most.


We can say that the owner of the file (in this case, it's ~user~) foo.py
has read (r) and write (w) permissions, and the group and the rest of
users have only read (r) permissions.

** Changing file permissions with chmod
By using ~chmod~ we can change the file permissions to let a user-based
permission group have specific access(read/write/execute) to the file.

The ~chmod~ command usage takes the following arguments
#+begin_src
  chmod  <groups to assign the permissions><permissions to assign/remove> <file/folder names>
#+end_src

Groups to assign the permissions can be specified using the following flags

A) u - owner
B) g - group
C) o - others
D) a - all users. For all users, it can also be left blank

Let us look at few examples of ~chmod~
*** Example of permission change to a file
Adding group's write permission to the file foo.py
#+begin_src
 user$ ls -la
 -rwxr-xr-x  1 user user 2203 Jul 23 23:26 foo.py
 user$ chmod g+w foo.py
 user$ ls -la
 -rwxrwxr-x  1 user user 2203 Jul 23 23:26 foo.py
#+end_src
*** Another example of permission change
Removing group's and others' execute permission to foo.py
#+begin_src
 user$ ls -la
 -rwxrwxr-x 1 user user 2203 Jul 23 23:26 foo.py
 user$ chmod go-x foo.py
 user$ ls -la
 -rwxrw-r-- 1 user user 2203 Jul 23 23:26 foo.py
#+end_src

*** Setting chmod file permissions using Binary References
Another method in which you can modify the permissions of a file
using ~chmod~ is via binary references which can be described as
follows.

The whole string stating the permissions (rwxrwxrwx) is substituted
by 3 numbers. The first number represents the Owner permission(u); the
second represents the Group permissions(g); and the last number represents
the permissions for all other users(o).

The permission types have assigned values and the sum of the
combinations is taken as permissions for each user-based permission group.

+ r = 4 # read
+ w = 2 # write
+ x = 1 # execute

**** Example for permission change using Binary Reference
Assign to the foo.py file the following permissions:

+ Owner: Read, Write and Execute
+ Group: Read and Execute
+ All others: Read and Execute

/Calculating the user-based permission groups values:/

Owner: r+w+x      = 4+2+1 = 7 \\
Group: r+x        = 4+0+1 = 5 \\
All others: r+x   = 4+0+1 = 5
  #+begin_src
 user$ ls -la
 -rwxrw-r-- 1 user user 2257 Jul 12 01:23 foo.py
 user$ chmod 755 foo.py
 user$ ls -la
 -rwxr-xr-x 1 user user 2257 Jul 12 01:23 foo.py
  #+end_src
* DONE Blog using org-mode in Doomemacs with Hugo :blog:org:doomemacs:hugo:
  CLOSED: [2024-03-23 Sat 14:00]
:PROPERTIES:
:EXPORT_FILE_NAME: org-doomemacs-hugo
:END:
Hello! This is a post describing how anyone who uses Doomemacs can setup a blog on Github user pages and get writing.
To get started, familiarize yourself with what I'm assuming you know to do.
#+hugo: more
+ Know how doomemacs works to the extent that you can find where your init.el is and upgrade/sync from the commandline.
+ Know how to install the Go programming language on your linux machine and can install a go package(ðŸ˜‰ Hugo)
+ Know how to use git well enough to commit/push your changes to a repository online - we'll be using Github
+ Know how to do a backflip once we are done, in your head is fine too

If you don't know any of these, read on - there will be links you might find helpful. We are here to learn ðŸ˜ƒ
** Doomemacs
Doomemacs is a starter pack of default configurations for Emacs. You get many things out of the box -  which you can disable/enable away at your will.
Try to use the latest doom configuration, I tend to upgrade doomemacs once in 3 months or whenever it is necessary which usually means that a package got an upgrade or a bug that got fixed.
Once you try it, there is no going back to other configs/setups unless you are the person who loves your current Emacs config ðŸ«¡

Quick refresher of doomemacs commands, from the commandline:
+ ~doom upgrade~ - upgrades doom itself, fetching latest packages and their configuration.
+ ~doom sync~ - installs/removes packages and loads the packages by reading your doom config.

*** Enable org-mode and +hugo it
In doomemacs, org-mode should be enabled by default. To add ~ox-hugo~, go to your ~init.el~ file in your doom config folder. You can use ~SPC f p~ and then select by filename.

Under the ~:lang~ heading, look for the line with ~org~ and add ~+hugo~ like below
#+begin_src emacs-lisp
  :lang
  ;; ... OTHER packages
  ;;nix               ; I hereby declare "nix geht mehr!"
  ;;ocaml             ; an objective camel
  (org +hugo)         ; organize your plain life in plain text
  ;;php               ; perl's insecure younger brother
  ;;plantuml          ; diagrams for confusing people more
#+end_src

If you are using standard Emacs config, an equivalent config with ~use-package~ is this
#+begin_src emacs-lisp
(use-package ox-hugo
  :ensure t
  :pin melpa
  :after ox)
#+end_src

This enables [[https://ox-hugo.scripter.co/][ox-hugo]] package which exports your posts in your ~.org~ file to markdown that is readable by Hugo(which we will now install)
** Hugo
Hugo is a static site generator written in Go. Hugo is great and everyone should use it. Let's get it installed on our machine using commandline,
this way we get to use the latest version and upgrade later on if needed
#+begin_sidenote
This depends on if the theme you choose also supports the latest Hugo version.
See under "Get Hugo"
#+end_sidenote
. But before we do that we need to have the Go programming language installed.
*** Installing Golang
Go to the install [[https://go.dev/doc/install][page]] and follow the instructions, they are clear and make sure you have added ~/usr/local/go/bin~ to the PATH environment variable.
Confirm it is installed using ~go version~ in your terminal, the version should be ~1.20~ or greater since Hugo requires this.
*** Get Hugo
To install Hugo after you have installed the Go language run the following command,
#+begin_src
go install github.com/gohugoio/hugo@latest
#+end_src
This is the standard version of Hugo and not the extended edition, if you need that refer [[https://github.com/gohugoio/hugo?tab=readme-ov-file#build-from-source][here]]

ðŸš¨ Installing Hugo with ~@latest~ might not work well with your theme and can break your site.
To check if a theme works well with a Hugo version you have, head over to the theme's repository and look in the ~config.toml~ file.

An example ~config.toml~ file in a theme's repository, here the maximum supported Hugo version is ~0.84.2~
#+begin_src
[module]
  [module.hugoVersion]
    extended = true
    min = "0.55.0"
    max = "0.84.2"
#+end_src

By default, binaries are installed to the bin subdirectory of the default ~GOPATH~ (~$HOME/go~ in linux) so make sure to add it like so in your ~.bashrc~
#+begin_src
# Add go installs to PATH
export PATH="$PATH:~/go/bin"
#+end_src

In a new terminal or once you have sourced your ~.bashrc~ file, check that hugo is installed using ~hugo version~.
** Setting things up
Create an empty git repository on Github, the name of your repository should be ~<username>.github.io~
and clone it on your machine to a folder named ~blog~ or something else.

Now intialize hugo in the blog folder, use ~--force~ since it is a non-empty directory and it contains ~.git~ folder
#+begin_src
hugo new site --force blog
#+end_src

From inside the blog folder, ~cd~ into it, make hugo blog as a hugo module. This enables the blog's theme to be used as a module.
#+begin_src
hugo mod init github.com/username/username.github.io
#+end_src

Add the following lines to your ~hugo.toml~ (previously it was ~config.toml~) to add a theme. Select any you like, there are [[https://themes.gohugo.io/][lots]].
#+begin_src config
[module]
  [[module.imports]]
    path = "github.com/athul/archie"
#+end_src

On the command line, run the following
#+begin_src
hugo mod get -u
#+end_src

From here on, you can follow from the step #5 from ox-hugo's quickstart i.e "Appending lines to the site config": https://ox-hugo.scripter.co/doc/quick-start/

*** Writing a post and exporting it
Once you are done writing your post in org file residing in your ~content-org/~ directory, export it using ~C-c C-e H H~.
This will create a markdown file in ~content/~ directory with the name that you provide in the properties of the org heading
#+begin_src org
:PROPERTIES:
:EXPORT_FILE_NAME: org-doomemacs-hugo
:END:
#+end_src
Hugo reads this markdown file in the ~content/~ directory and generates the necessary contents for the site.
Commit the markdown file to your repository.

*** Auto deploy using Github actions
To setup github actions to start deploying once you commit a markdown post that gets generated in the ~content/~ directory to your repository on Github see [[https://gohugo.io/hosting-and-deployment/hosting-on-github/#step-by-step-instructions][here]].

+ Change the settings of your repository to enable Github actions
+ Create a file ~.github/workflows/hugo.yaml~ in your repository and paste the contents from the link
+ Commit this file to your repository and see the magic happen ðŸŽ‰

** References
For references (or) further reading:
 + https://ox-hugo.scripter.co/doc/quick-start/
 + https://ridaayed.com/posts/howto-ox-hugo-github-pages/

** Thanks
Thanks to [[https://baali.muse-amuse.in/][Shantanu]] and [[https://github.com/punchagan][Punch]] for suggesting me to write this post and for feedback which helped clarify
things. Thank you for reading
